// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: service.proto

package gRPC

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ThisserviceClient is the client API for Thisservice service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ThisserviceClient interface {
	MakeABid(ctx context.Context, in *Bid, opts ...grpc.CallOption) (*Result, error)
	GetResult(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Result, error)
}

type thisserviceClient struct {
	cc grpc.ClientConnInterface
}

func NewThisserviceClient(cc grpc.ClientConnInterface) ThisserviceClient {
	return &thisserviceClient{cc}
}

func (c *thisserviceClient) MakeABid(ctx context.Context, in *Bid, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/gRPC.Thisservice/MakeABid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thisserviceClient) GetResult(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/gRPC.Thisservice/GetResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ThisserviceServer is the server API for Thisservice service.
// All implementations should embed UnimplementedThisserviceServer
// for forward compatibility
type ThisserviceServer interface {
	MakeABid(context.Context, *Bid) (*Result, error)
	GetResult(context.Context, *emptypb.Empty) (*Result, error)
}

// UnimplementedThisserviceServer should be embedded to have forward compatible implementations.
type UnimplementedThisserviceServer struct {
}

func (UnimplementedThisserviceServer) MakeABid(context.Context, *Bid) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeABid not implemented")
}
func (UnimplementedThisserviceServer) GetResult(context.Context, *emptypb.Empty) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResult not implemented")
}

// UnsafeThisserviceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ThisserviceServer will
// result in compilation errors.
type UnsafeThisserviceServer interface {
	mustEmbedUnimplementedThisserviceServer()
}

func RegisterThisserviceServer(s grpc.ServiceRegistrar, srv ThisserviceServer) {
	s.RegisterService(&Thisservice_ServiceDesc, srv)
}

func _Thisservice_MakeABid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Bid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThisserviceServer).MakeABid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gRPC.Thisservice/MakeABid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThisserviceServer).MakeABid(ctx, req.(*Bid))
	}
	return interceptor(ctx, in, info, handler)
}

func _Thisservice_GetResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThisserviceServer).GetResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gRPC.Thisservice/GetResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThisserviceServer).GetResult(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Thisservice_ServiceDesc is the grpc.ServiceDesc for Thisservice service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Thisservice_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gRPC.Thisservice",
	HandlerType: (*ThisserviceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MakeABid",
			Handler:    _Thisservice_MakeABid_Handler,
		},
		{
			MethodName: "GetResult",
			Handler:    _Thisservice_GetResult_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
